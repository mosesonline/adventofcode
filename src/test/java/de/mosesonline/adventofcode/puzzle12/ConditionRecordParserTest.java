package de.mosesonline.adventofcode.puzzle12;

import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.net.URISyntaxException;
import java.util.List;

import static de.mosesonline.adventofcode.common.FileLoader.getInstance;
import static de.mosesonline.adventofcode.puzzle12.SpringStatus.*;
import static org.junit.jupiter.api.Assertions.assertEquals;

class ConditionRecordParserTest {
    private static final ConditionRecord TEST_CONDITION_RECORD = new ConditionRecord(List.of(
            new SpringRow(new StringStates(new SpringStatus[]{UNKNOWN, UNKNOWN, UNKNOWN, OPERATIONAL, DAMAGED, DAMAGED, DAMAGED}, -1), new int[]{1, 1, 3}),
            new SpringRow(new StringStates(new SpringStatus[]{OPERATIONAL, UNKNOWN, UNKNOWN, OPERATIONAL, OPERATIONAL, UNKNOWN, UNKNOWN, OPERATIONAL, OPERATIONAL, OPERATIONAL, UNKNOWN, DAMAGED, DAMAGED, OPERATIONAL}, -1), new int[]{1, 1, 3}),
            new SpringRow(new StringStates(new SpringStatus[]{UNKNOWN, DAMAGED, UNKNOWN, DAMAGED, UNKNOWN, DAMAGED, UNKNOWN, DAMAGED, UNKNOWN, DAMAGED, UNKNOWN, DAMAGED, UNKNOWN, DAMAGED, UNKNOWN}, -1), new int[]{1, 3, 1, 6}),
            new SpringRow(new StringStates(new SpringStatus[]{UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, OPERATIONAL, DAMAGED, OPERATIONAL, OPERATIONAL, OPERATIONAL, DAMAGED, OPERATIONAL, OPERATIONAL, OPERATIONAL}, -1), new int[]{4, 1, 1}),
            new SpringRow(new StringStates(new SpringStatus[]{UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, OPERATIONAL, DAMAGED, DAMAGED, DAMAGED, DAMAGED, DAMAGED, DAMAGED, OPERATIONAL, OPERATIONAL, DAMAGED, DAMAGED, DAMAGED, DAMAGED, DAMAGED, OPERATIONAL}, -1), new int[]{1, 6, 5}),
            new SpringRow(new StringStates(new SpringStatus[]{UNKNOWN, DAMAGED, DAMAGED, DAMAGED, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN}, -1), new int[]{3, 2, 1})
    ));
    private static final ConditionRecord TEST_FOLDED_CONDITION_RECORD = new ConditionRecord(List.of(
            new SpringRow(new StringStates(new SpringStatus[]{UNKNOWN, UNKNOWN, UNKNOWN, OPERATIONAL, DAMAGED, DAMAGED, DAMAGED,
                    UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, OPERATIONAL, DAMAGED, DAMAGED, DAMAGED,
                    UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, OPERATIONAL, DAMAGED, DAMAGED, DAMAGED,
                    UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, OPERATIONAL, DAMAGED, DAMAGED, DAMAGED,
                    UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, OPERATIONAL, DAMAGED, DAMAGED, DAMAGED
            }, -1),
                    new int[]{1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3}),
            new SpringRow(new StringStates(new SpringStatus[]{
                    OPERATIONAL, UNKNOWN, UNKNOWN, OPERATIONAL, OPERATIONAL, UNKNOWN, UNKNOWN, OPERATIONAL, OPERATIONAL, OPERATIONAL, UNKNOWN, DAMAGED, DAMAGED, OPERATIONAL,
                    UNKNOWN, OPERATIONAL, UNKNOWN, UNKNOWN, OPERATIONAL, OPERATIONAL, UNKNOWN, UNKNOWN, OPERATIONAL, OPERATIONAL, OPERATIONAL, UNKNOWN, DAMAGED, DAMAGED, OPERATIONAL,
                    UNKNOWN, OPERATIONAL, UNKNOWN, UNKNOWN, OPERATIONAL, OPERATIONAL, UNKNOWN, UNKNOWN, OPERATIONAL, OPERATIONAL, OPERATIONAL, UNKNOWN, DAMAGED, DAMAGED, OPERATIONAL,
                    UNKNOWN, OPERATIONAL, UNKNOWN, UNKNOWN, OPERATIONAL, OPERATIONAL, UNKNOWN, UNKNOWN, OPERATIONAL, OPERATIONAL, OPERATIONAL, UNKNOWN, DAMAGED, DAMAGED, OPERATIONAL,
                    UNKNOWN, OPERATIONAL, UNKNOWN, UNKNOWN, OPERATIONAL, OPERATIONAL, UNKNOWN, UNKNOWN, OPERATIONAL, OPERATIONAL, OPERATIONAL, UNKNOWN, DAMAGED, DAMAGED, OPERATIONAL
            }, -1),
                    new int[]{1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3}),
            new SpringRow(new StringStates(new SpringStatus[]{
                    UNKNOWN, DAMAGED, UNKNOWN, DAMAGED, UNKNOWN, DAMAGED, UNKNOWN, DAMAGED, UNKNOWN, DAMAGED, UNKNOWN, DAMAGED, UNKNOWN, DAMAGED, UNKNOWN,
                    UNKNOWN, UNKNOWN, DAMAGED, UNKNOWN, DAMAGED, UNKNOWN, DAMAGED, UNKNOWN, DAMAGED, UNKNOWN, DAMAGED, UNKNOWN, DAMAGED, UNKNOWN, DAMAGED, UNKNOWN,
                    UNKNOWN, UNKNOWN, DAMAGED, UNKNOWN, DAMAGED, UNKNOWN, DAMAGED, UNKNOWN, DAMAGED, UNKNOWN, DAMAGED, UNKNOWN, DAMAGED, UNKNOWN, DAMAGED, UNKNOWN,
                    UNKNOWN, UNKNOWN, DAMAGED, UNKNOWN, DAMAGED, UNKNOWN, DAMAGED, UNKNOWN, DAMAGED, UNKNOWN, DAMAGED, UNKNOWN, DAMAGED, UNKNOWN, DAMAGED, UNKNOWN,
                    UNKNOWN, UNKNOWN, DAMAGED, UNKNOWN, DAMAGED, UNKNOWN, DAMAGED, UNKNOWN, DAMAGED, UNKNOWN, DAMAGED, UNKNOWN, DAMAGED, UNKNOWN, DAMAGED, UNKNOWN
            }, -1),
                    new int[]{1, 3, 1, 6, 1, 3, 1, 6, 1, 3, 1, 6, 1, 3, 1, 6, 1, 3, 1, 6}),
            new SpringRow(new StringStates(new SpringStatus[]{
                    UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, OPERATIONAL, DAMAGED, OPERATIONAL, OPERATIONAL, OPERATIONAL, DAMAGED, OPERATIONAL, OPERATIONAL, OPERATIONAL,
                    UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, OPERATIONAL, DAMAGED, OPERATIONAL, OPERATIONAL, OPERATIONAL, DAMAGED, OPERATIONAL, OPERATIONAL, OPERATIONAL,
                    UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, OPERATIONAL, DAMAGED, OPERATIONAL, OPERATIONAL, OPERATIONAL, DAMAGED, OPERATIONAL, OPERATIONAL, OPERATIONAL,
                    UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, OPERATIONAL, DAMAGED, OPERATIONAL, OPERATIONAL, OPERATIONAL, DAMAGED, OPERATIONAL, OPERATIONAL, OPERATIONAL,
                    UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, OPERATIONAL, DAMAGED, OPERATIONAL, OPERATIONAL, OPERATIONAL, DAMAGED, OPERATIONAL, OPERATIONAL, OPERATIONAL
            }, -1),
                    new int[]{4, 1, 1, 4, 1, 1, 4, 1, 1, 4, 1, 1, 4, 1, 1}),
            new SpringRow(new StringStates(new SpringStatus[]{
                    UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, OPERATIONAL, DAMAGED, DAMAGED, DAMAGED, DAMAGED, DAMAGED, DAMAGED, OPERATIONAL, OPERATIONAL, DAMAGED, DAMAGED, DAMAGED, DAMAGED, DAMAGED, OPERATIONAL,
                    UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, OPERATIONAL, DAMAGED, DAMAGED, DAMAGED, DAMAGED, DAMAGED, DAMAGED, OPERATIONAL, OPERATIONAL, DAMAGED, DAMAGED, DAMAGED, DAMAGED, DAMAGED, OPERATIONAL,
                    UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, OPERATIONAL, DAMAGED, DAMAGED, DAMAGED, DAMAGED, DAMAGED, DAMAGED, OPERATIONAL, OPERATIONAL, DAMAGED, DAMAGED, DAMAGED, DAMAGED, DAMAGED, OPERATIONAL,
                    UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, OPERATIONAL, DAMAGED, DAMAGED, DAMAGED, DAMAGED, DAMAGED, DAMAGED, OPERATIONAL, OPERATIONAL, DAMAGED, DAMAGED, DAMAGED, DAMAGED, DAMAGED, OPERATIONAL,
                    UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, OPERATIONAL, DAMAGED, DAMAGED, DAMAGED, DAMAGED, DAMAGED, DAMAGED, OPERATIONAL, OPERATIONAL, DAMAGED, DAMAGED, DAMAGED, DAMAGED, DAMAGED, OPERATIONAL
            }, -1),
                    new int[]{1, 6, 5, 1, 6, 5, 1, 6, 5, 1, 6, 5, 1, 6, 5}),
            new SpringRow(new StringStates(new SpringStatus[]{
                    UNKNOWN, DAMAGED, DAMAGED, DAMAGED, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN,
                    UNKNOWN, UNKNOWN, DAMAGED, DAMAGED, DAMAGED, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN,
                    UNKNOWN, UNKNOWN, DAMAGED, DAMAGED, DAMAGED, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN,
                    UNKNOWN, UNKNOWN, DAMAGED, DAMAGED, DAMAGED, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN,
                    UNKNOWN, UNKNOWN, DAMAGED, DAMAGED, DAMAGED, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN
            }, -1),
                    new int[]{3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1})
    ));

    @Test
    void shouldReadTestData() throws URISyntaxException, IOException {
        ConditionRecord cr = new ConditionRecordParser().parse(getInstance().loadFromResource("20231212_test_part1.txt"));

        assertEquals(TEST_CONDITION_RECORD, cr);

    }

    @Test
    void shouldReadFoldedTestData() throws URISyntaxException, IOException {
        ConditionRecord cr = new ConditionRecordParser().parseFolded(getInstance().loadFromResource("20231212_test_part1.txt"));

        assertEquals(TEST_FOLDED_CONDITION_RECORD, cr);

    }
}
